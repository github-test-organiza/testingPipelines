name: Run custom Specific Playwright Tests
on:
  workflow_dispatch:
    inputs:
      testFile:
        description: "Test file to run"
        required: true
        type: choice
        options:
          - tests/vineportal/smoke.tests.spec.js
          - tests/vineportal/admin.tests.spec.js
          - tests/vineportal/flows.tests.spec.js
          - tests/vineportal/massCommunications.tests.spec.js
          - tests/vineportal/projectForms.tests.spec.js
          - tests/vineportal/logInPortal.tests.spec.js
      grep:
        description: "Filter tests by name using --grep (optional)"
        required: false
      baseUrl:
        description: "Base URL to test against"
        required: false
      givenUsername:
        description: "Username for login"
        required: false
      givenPassword:
        description: "Password for login"
        required: false
      givenFilevineUsername:
        description: "Username for Filevine login"
        required: false
      givenFilevinePassword:
        description: "Password for Filevine login"
        required: false
jobs:
  debug-inputs:
    runs-on: ubuntu-latest
    name: Debug received inputs
    steps:
      - name: Show received inputs
        run: |
          echo "üîç testFile: ${{ github.event.inputs.testFile }}"
          echo "üîç grep: ${{ github.event.inputs.grep }}"
          echo "üîç baseUrl: ${{ github.event.inputs.baseUrl }}"
          echo "üîç givenUsername: ${{ github.event.inputs.givenUsername }}"
          echo "üîç givenPassword: ${{ github.event.inputs.givenPassword }}"
          echo "üîç givenFilevineUsername: ${{ github.event.inputs.givenFilevineUsername }}"
          echo "üîç givenFilevinePassword: ${{ github.event.inputs.givenFilevinePassword }}"
  run-playwright-tests:
    runs-on: ubuntu-latest
    needs: debug-inputs
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm ci
      - name: Install browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        env:
          GIVEN_BASE_URL_PORTAL: ${{ github.event.inputs.baseUrl }}
          GIVENUSERNAME: ${{ github.event.inputs.givenUsername }}
          GIVENPASSWORD: ${{ github.event.inputs.givenPassword }}
          GIVENFILEVINEUSERNAME: ${{ github.event.inputs.givenFilevineUsername }}
          GIVENFILEVINEPASSWORD: ${{ github.event.inputs.givenFilevinePassword }}
        run: |
          if [[ "${{ github.event.inputs.grep }}" != "" ]]; then
            npx playwright test ${{ github.event.inputs.testFile }} --grep "${{ github.event.inputs.grep }}"
          else
            npx playwright test ${{ github.event.inputs.testFile }}
          fi
      - name: Ensure Playwright report exists and extract summary
        if: always()
        id: report-analysis
        run: |
          # Create reports directory if it doesn't exist
          mkdir -p reports/html
          
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Check if report exists
          if [ ! -f "reports/html/index.html" ]; then
            echo "üìã Playwright report not found, creating empty report..."
            
            # Create basic HTML report
            cat > reports/html/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Playwright Test Report</title>
              <meta charset="utf-8">
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f8f9fa; }
                  .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { background: #e3f2fd; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                  .warning { color: #ff6b35; font-weight: bold; font-size: 18px; }
                  .info { margin-top: 20px; padding: 15px; background: #f5f5f5; border-radius: 5px; }
                  .info h3 { color: #1976d2; margin-top: 0; }
                  .info ul { margin: 10px 0; }
                  .info li { margin: 5px 0; }
                  .status { background: #ffeb3b; padding: 10px; border-radius: 5px; margin: 15px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üé≠ Playwright Test Report</h1>
                      <p class="warning">‚ö†Ô∏è Empty Report - Tests were not completed successfully</p>
                  </div>
                  <div class="status">
                      <strong>Status:</strong> Tests did not complete successfully or did not generate a report
                  </div>
                  <div class="info">
                      <h3>üìä Execution Information:</h3>
                      <ul>
                          <li><strong>Test file:</strong> ${{ github.event.inputs.testFile }}</li>
                          <li><strong>Filter (grep):</strong> ${{ github.event.inputs.grep || 'None' }}</li>
                          <li><strong>Base URL:</strong> ${{ github.event.inputs.baseUrl || 'Default' }}</li>
                          <li><strong>Executed by:</strong> ${{ github.actor }}</li>
                          <li><strong>Branch:</strong> ${{ github.ref_name }}</li>
                          <li><strong>Run ID:</strong> ${{ github.run_id }}</li>
                          <li><strong>Execution date:</strong> ${TIMESTAMP}</li>
                      </ul>
                  </div>
                  <div class="info">
                      <h3>üîç Possible Causes:</h3>
                      <ul>
                          <li>Tests failed before generating the report</li>
                          <li>Playwright configuration error</li>
                          <li>Connectivity issues or timeouts</li>
                          <li>Access credentials error</li>
                      </ul>
                  </div>
              </div>
          </body>
          </html>
          EOF
            
            REPORT_SUMMARY="üìã Empty report generated - Tests were not completed successfully"
            REPORT_STATUS="EMPTY"
            TEST_RESULTS="No tests were executed"
            
            echo "‚úÖ Empty report created successfully"
          else
            echo "‚úÖ Playwright report found, analyzing content..."
            
            # Analyze existing report to extract information
            REPORT_STATUS="COMPLETED"
            
            # Extract basic information from report (adjust according to your report format)
            if grep -qi "passed" reports/html/index.html && grep -qi "failed" reports/html/index.html; then
              # Try to extract basic statistics
              PASSED_TESTS=$(grep -o "passed" reports/html/index.html | wc -l || echo "0")
              FAILED_TESTS=$(grep -o "failed" reports/html/index.html | wc -l || echo "0")
              TEST_RESULTS="Tests executed: ${PASSED_TESTS} passed, ${FAILED_TESTS} failed"
              REPORT_SUMMARY="üìä Complete report generated - $TEST_RESULTS"
            else
              TEST_RESULTS="Report generated successfully"
              REPORT_SUMMARY="üìä Playwright report generated correctly"
            fi
          fi
          
          # Create plain text summary for inclusion in Jira
          cat > report_summary.txt << EOF
          üìã PLAYWRIGHT TEST REPORT SUMMARY
          
          üî∏ Status: $REPORT_STATUS
          üî∏ Result: $TEST_RESULTS
          üî∏ Test file: ${{ github.event.inputs.testFile }}
          üî∏ Filter applied: ${{ github.event.inputs.grep || 'None' }}
          üî∏ Base URL: ${{ github.event.inputs.baseUrl || 'Default' }}
          üî∏ Executed by: ${{ github.actor }}
          üî∏ Branch: ${{ github.ref_name }}
          üî∏ Date: ${TIMESTAMP}
          üî∏ Run ID: ${{ github.run_id }}
          
          $(if [ "$REPORT_STATUS" = "EMPTY" ]; then
              echo "‚ö†Ô∏è WARNING: This is an empty report because tests were not completed successfully."
              echo ""
              echo "Possible causes:"
              echo "‚Ä¢ Tests failed before generating the report"
              echo "‚Ä¢ Playwright configuration error" 
              echo "‚Ä¢ Connectivity issues or timeouts"
              echo "‚Ä¢ Access credentials error"
          else
              echo "‚úÖ Tests were executed and generated a complete report."
          fi)
          EOF
          
          # Export variables for next steps
          echo "report_summary=$REPORT_SUMMARY" >> $GITHUB_OUTPUT
          echo "report_status=$REPORT_STATUS" >> $GITHUB_OUTPUT
          echo "test_results=$TEST_RESULTS" >> $GITHUB_OUTPUT
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: reports/html/
          retention-days: 30
      - name: Upload report summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: report-summary
          path: report_summary.txt
          retention-days: 30
      - name: Deploy report to GitHub Pages (if enabled)
        if: always()
        continue-on-error: true
        run: |
          # Only try if GitHub Pages is enabled
          echo "üìÑ Attempting to deploy report to GitHub Pages..."
          
          # Create structure for GitHub Pages
          mkdir -p gh-pages
          cp -r reports/html/* gh-pages/ 2>/dev/null || true
          
          # Create index file with unique timestamp
          UNIQUE_ID="${{ github.run_id }}-$(date +%s)"
          
          # Rename report with unique ID to avoid conflicts
          if [ -f "gh-pages/index.html" ]; then
            mv gh-pages/index.html gh-pages/report-${UNIQUE_ID}.html
            echo "üìÑ Report available at: report-${UNIQUE_ID}.html"
            echo "pages_report_url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/report-${UNIQUE_ID}.html" >> $GITHUB_OUTPUT
          fi
      - name: Send detailed feedback to Jira
        if: always()
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          ISSUE_KEY="MT-4"
          
          # Determine test result status
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="PASSED"
          else
            STATUS_EMOJI="‚ùå"
            STATUS_TEXT="FAILED"
          fi
          
          # Get current timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Get run URL
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Read report summary
          DETAILED_SUMMARY=""
          if [ -f "report_summary.txt" ]; then
            # Escape special characters for JSON and convert line breaks
            DETAILED_SUMMARY=$(cat report_summary.txt | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}')
          fi
          
          # Report info from previous step
          REPORT_STATUS="${{ steps.report-analysis.outputs.report_status }}"
          TEST_RESULTS="${{ steps.report-analysis.outputs.test_results }}"
          
          # Create detailed comment body in ADF format with embedded report summary
          COMMENT_BODY=$(cat << EOF
          {
            "body": {
              "type": "doc",
              "version": 1,
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "${STATUS_EMOJI} GitHub Actions Test Execution: ",
                      "marks": [{"type": "strong"}]
                    },
                    {
                      "type": "text",
                      "text": "${STATUS_TEXT}"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "üìä Test Results: ",
                      "marks": [{"type": "strong"}]
                    },
                    {
                      "type": "text",
                      "text": "${TEST_RESULTS}"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "üìã Execution Details:",
                      "marks": [{"type": "strong"}]
                    }
                  ]
                },
                {
                  "type": "bulletList",
                  "content": [
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Test File: "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.event.inputs.testFile }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Filter (grep): "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.event.inputs.grep || 'None' }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Base URL: "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.event.inputs.baseUrl || 'Default' }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Executed by: "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.actor }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Branch: "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.ref_name }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Execution Time: "
                            },
                            {
                              "type": "text",
                              "text": "${TIMESTAMP}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "rule"
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "üìÑ DETAILED REPORT SUMMARY",
                      "marks": [{"type": "strong"}]
                    }
                  ]
                },
                {
                  "type": "codeBlock",
                  "attrs": {"language": "text"},
                  "content": [
                    {
                      "type": "text",
                      "text": "${DETAILED_SUMMARY}"
                    }
                  ]
                },
                {
                  "type": "rule"
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "üîó Links:",
                      "marks": [{"type": "strong"}]
                    }
                  ]
                },
                {
                  "type": "bulletList",
                  "content": [
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "GitHub Actions Run",
                              "marks": [{"type": "link", "attrs": {"href": "${RUN_URL}"}}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "üìã Complete Playwright report is included in the summary above"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
          EOF
          )
          
          curl -X POST \
            -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --url "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY/comment" \
            -d "$COMMENT_BODY"
