name: Run custom Specific Playwright Tests
on:
  workflow_dispatch:
    inputs:
      testFile:
        description: "Test file to run"
        required: true
        type: choice
        options:
          - tests/vineportal/smoke.tests.spec.js
          - tests/vineportal/admin.tests.spec.js
          - tests/vineportal/flows.tests.spec.js
          - tests/vineportal/massCommunications.tests.spec.js
          - tests/vineportal/projectForms.tests.spec.js
          - tests/vineportal/logInPortal.tests.spec.js
      grep:
        description: "Filter tests by name using --grep (optional)"
        required: false
      baseUrl:
        description: "Base URL to test against"
        required: false
      givenUsername:
        description: "Username for login"
        required: false
      givenPassword:
        description: "Password for login"
        required: false
      givenFilevineUsername:
        description: "Username for Filevine login"
        required: false
      givenFilevinePassword:
        description: "Password for Filevine login"
        required: false
jobs:
  debug-inputs:
    runs-on: ubuntu-latest
    name: Debug received inputs
    steps:
      - name: Show received inputs
        run: |
          echo "üîç testFile: ${{ github.event.inputs.testFile }}"
          echo "üîç grep: ${{ github.event.inputs.grep }}"
          echo "üîç baseUrl: ${{ github.event.inputs.baseUrl }}"
          echo "üîç givenUsername: ${{ github.event.inputs.givenUsername }}"
          echo "üîç givenPassword: ${{ github.event.inputs.givenPassword }}"
          echo "üîç givenFilevineUsername: ${{ github.event.inputs.givenFilevineUsername }}"
          echo "üîç givenFilevinePassword: ${{ github.event.inputs.givenFilevinePassword }}"
  run-playwright-tests:
    runs-on: ubuntu-latest
    needs: debug-inputs
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm ci
      - name: Install browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        env:
          GIVEN_BASE_URL_PORTAL: ${{ github.event.inputs.baseUrl }}
          GIVENUSERNAME: ${{ github.event.inputs.givenUsername }}
          GIVENPASSWORD: ${{ github.event.inputs.givenPassword }}
          GIVENFILEVINEUSERNAME: ${{ github.event.inputs.givenFilevineUsername }}
          GIVENFILEVINEPASSWORD: ${{ github.event.inputs.givenFilevinePassword }}
        run: |
          if [[ "${{ github.event.inputs.grep }}" != "" ]]; then
            npx playwright test ${{ github.event.inputs.testFile }} --grep "${{ github.event.inputs.grep }}"
          else
            npx playwright test ${{ github.event.inputs.testFile }}
          fi
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: reports/html/
          retention-days: 30
      - name: Send feedback to Jira
        if: always()
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          ISSUE_KEY="MT-4"
          
          # Determine test result status
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="PASSED"
            STATUS_COLOR="success"
          else
            STATUS_EMOJI="‚ùå"
            STATUS_TEXT="FAILED"
            STATUS_COLOR="failure"
          fi
          
          # Get current timestamp
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          # Get run URL
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Create detailed comment body in ADF format
          COMMENT_BODY=$(cat << EOF
          {
            "body": {
              "type": "doc",
              "version": 1,
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "${STATUS_EMOJI} GitHub Actions Test Execution: ",
                      "marks": [{"type": "strong"}]
                    },
                    {
                      "type": "text",
                      "text": "${STATUS_TEXT}"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "üìä Test Details:",
                      "marks": [{"type": "strong"}]
                    }
                  ]
                },
                {
                  "type": "bulletList",
                  "content": [
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Test File: "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.event.inputs.testFile }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Filter (grep): "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.event.inputs.grep || 'None' }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Base URL: "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.event.inputs.baseUrl || 'Default' }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Executed by: "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.actor }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Branch: "
                            },
                            {
                              "type": "text",
                              "text": "${{ github.ref_name }}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Execution Time: "
                            },
                            {
                              "type": "text",
                              "text": "${TIMESTAMP}",
                              "marks": [{"type": "code"}]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": "üîó Links:",
                      "marks": [{"type": "strong"}]
                    }
                  ]
                },
                {
                  "type": "bulletList",
                  "content": [
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "GitHub Actions Run: ",
                              "marks": [{"type": "link", "attrs": {"href": "${RUN_URL}"}}]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "listItem",
                      "content": [
                        {
                          "type": "paragraph",
                          "content": [
                            {
                              "type": "text",
                              "text": "Playwright Report: Available in job artifacts (if test completed)"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
          EOF
          )
          
          curl -X POST \
            -u "$JIRA_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --url "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY/comment" \
            -d "$COMMENT_BODY"
